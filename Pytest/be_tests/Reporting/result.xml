<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="2" failures="2" skipped="0" tests="14" time="39.127" timestamp="2021-04-27T14:00:39.547239" hostname="ip-192-168-1-37.eu-west-1.compute.internal"><testcase classname="users.test_register" name="test_registration_smoke" time="5.196" /><testcase classname="users.test_login" name="test_login_smoke" time="10.557"><failure message="assert (False)">login_user_smoke = {'initial_data': {'password': 'A@aaaaaa', 'username': 'BEauto270603630'}, 'response_data': {'code': None, 'data': {'ac...021-04-27T18:15:39.546645Z', 'feature_flags': [], ...}, 'message': 'Login successful', 'success': True}, 'state': 'PA'}
pivapi = &lt;piv_api.PivApi object at 0x10fe16490&gt;

    @pytest.mark.smoke
    @pytest.mark.run(order=2)
    def test_login_smoke(login_user_smoke, pivapi):
        """tests PIV login endpoint"""
&gt;       verify_login_results(login_user_smoke, pivapi)

users/test_login.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

response_data = {'initial_data': {'password': 'A@aaaaaa', 'username': 'BEauto270603630'}, 'response_data': {'code': None, 'data': {'ac...021-04-27T18:15:39.546645Z', 'feature_flags': [], ...}, 'message': 'Login successful', 'success': True}, 'state': 'PA'}
pivapi = &lt;piv_api.PivApi object at 0x10fe16490&gt;

    def verify_login_results(response_data, pivapi):
        assert response_data['response_data']['data']['pam_session_id']
        assert response_data['response_data']['data']['kambi_session_id']
        assert response_data['response_data']['data']['token']
        assert response_data['response_data']['data']['user_guid']
    
        assert response_data['response_data']['data']['username'] \
               and (response_data['response_data']['data']['username']
                    == response_data['initial_data']['username'].lower())
    
        # verify KYC Status
        kyc_approved = response_data['response_data']['data']['kyc_approved']
        kyc_status = response_data['response_data']['data']['kyc_status']
        token = response_data['response_data']['data']['token']
    
        timeout_start = time.time()
        # keep checking user profile until KYC is complete or timeout is met
        while time.time() &lt; timeout_start + timeout and (not kyc_approved or kyc_status != 'COMPLETE'):
            get_profile_response = pivapi.get_profile(token)
            kyc_approved = get_profile_response['kyc_approved']
            kyc_status = get_profile_response['kyc_status']
    
&gt;       assert kyc_approved and kyc_status == 'COMPLETE'
E       assert (False)

users/test_login.py:52: AssertionError</failure></testcase><testcase classname="users.test_deposit_and_get_balance" name="test_deposit_and_get_balance[50]" time="2.077" /><testcase classname="users.test_deposit_and_get_balance" name="test_deposit_and_get_balance[100]" time="2.105" /><testcase classname="users.test_deposit_and_get_balance" name="test_deposit_and_get_balance[167]" time="2.134" /><testcase classname="users.test_get_update_profile" name="test_get_profile" time="10.791"><failure message="AssertionError: No loyalty id found&#10;assert None">login_user_smoke = {'initial_data': {'password': 'A@aaaaaa', 'username': 'BEauto270603630'}, 'response_data': {'code': None, 'data': {'ac...021-04-27T18:15:39.546645Z', 'feature_flags': [], ...}, 'message': 'Login successful', 'success': True}, 'state': 'PA'}
pivapi = &lt;piv_api.PivApi object at 0x10fe16490&gt;

    @pytest.mark.smoke
    @pytest.mark.run(order=4)
    def test_get_profile(login_user_smoke, pivapi):
        """test piv get profile and update profile endpoints"""
    
        token = login_user_smoke['response_data']['data']['token']
        username = login_user_smoke['response_data']['data']['username']
        guid = login_user_smoke['response_data']['data']['guid']
        email = login_user_smoke['response_data']['data']['email']
    
        get_profile_response = pivapi.get_profile(token)
    
        print(get_profile_response)
    
        # Body contains odds_format and matches american
        assert get_profile_response['preferences']['odds_format'] == 'american'
    
        # Body contains require_login_security_questions and matches false (deprecated)
        #assert not get_profile_response['preferences']['require_login_security_questions']
    
        # Body contains require_login_secondary_auth and matches false
        assert not get_profile_response['preferences']['require_login_secondary_auth']
    
        # Body contains login_notification and matches false
        assert not get_profile_response['preferences']['login_notification']
    
        # Body contains bet_acceptance_criteria and matches accept_higher_odds
        assert get_profile_response['preferences']['bet_acceptance_criteria'] == 'accept_higher_odds'
    
        # Body contains review_odds_change and matches false
        assert not get_profile_response['preferences']['review_odds_change'], \
            "review_odds_change not found or doesn't match"
    
        # Body contains username and matches
        assert get_profile_response['username'] == username, "username not found or doesn't match"
    
        # Body contains guid and matches
        assert get_profile_response['guid'] == guid, "no guid found or doesn't match"
    
        # Body contains email and matches
        assert get_profile_response['email'] == email, "email not found or doesn't match"
    
        # Body contains locale and matches en_US
        assert get_profile_response['locale'] == 'en_US', "locale doesn't match"
    
        timeout_start = time.time()
        loyalty_id = get_profile_response['loyalty_id']
        # keep calling get profile until Loyaltyid shows or timeout is met
        # Body contains loyalty_id
        if not loyalty_id:
            while time.time() &lt; timeout_start + timeout and not loyalty_id:
                logging.info(' loyalty id not found polling again')
                loyalty_id = pivapi.get_profile(token)['loyalty_id']
    
&gt;       assert loyalty_id, 'No loyalty id found'
E       AssertionError: No loyalty id found
E       assert None

users/test_get_update_profile.py:63: AssertionError</failure></testcase><testcase classname="users.test_get_update_profile" name="test_update_profile[decimal-False-True-False-True]" time="0.628" /><testcase classname="users.test_get_update_profile" name="test_update_profile[american-True-False-False-True]" time="0.499" /><testcase classname="users.test_get_update_profile" name="test_update_profile[decimal-False-False-True-False]" time="0.448" /><testcase classname="users.test_get_update_profile" name="test_update_profile[american-False-False-False-True]" time="0.446" /><testcase classname="test_homepage" name="test_homepage" time="0.522" /><testcase classname="geocomply.test_valid_test_packets" name="test_generate_and_validate_valid_test_packets" time="0.873"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://sb-qa-api.penngineering.io/geocomply/validate/&quot;">login_user_smoke = {'initial_data': {'password': 'A@aaaaaa', 'username': 'BEauto270603630'}, 'response_data': {'code': None, 'data': {'ac...021-04-27T18:15:39.546645Z', 'feature_flags': [], ...}, 'message': 'Login successful', 'success': True}, 'state': 'PA'}
geo_generate_smoke = {'packet': 'J4f0NwtbslYCl1NoUsbcVH3jPMY+VaPIH7fILLgT0d3701YFJZbL8l/y4DuM1Vh9T0g5mlwapVQdXr+sdXQdgywXtMvu/V0UYBjFZ8i2tz...BalK9mLL9m45nrQBdREFKfWGc0poQaBnKf/qUJ4rMkhwmQt0lHBGXSAQINXgEQMy4CdhbNuIAxkqCa7NvdkYJFC3FABXkSyWb3+Jw=', 'state': 'PA'}
geoapi = &lt;geocomply_api.GeoApi object at 0x10fe00a00&gt;

    @pytest.fixture()
    def geo_validate_smoke(login_user_smoke, geo_generate_smoke, geoapi):
        geocomply_jwt = login_user_smoke['response_data']['data']['geocomply_jwt']
        packet = geo_generate_smoke['packet']
        state = geo_generate_smoke['state']
&gt;       return geoapi.validate_test_packet(geocomply_jwt, packet, state )

geocomply/test_valid_test_packets.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../Piv_packages/api_interactions/geocomply_api.py:53: in validate_test_packet
    validate_packet_request.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ''
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode('utf-8')
            except UnicodeDecodeError:
                reason = self.reason.decode('iso-8859-1')
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://sb-qa-api.penngineering.io/geocomply/validate/

../../../../pyvirtualenv/vedemo/lib/python3.8/site-packages/requests/models.py:943: HTTPError</error></testcase><testcase classname="test_state_config" name="test_state_config[PA]" time="0.536" /><testcase classname="kambi.test_place_bet" name="test_place_bet_and_verify_couponid_smoke" time="2.149"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 409 Client Error: Conflict for url: https://ctn-api.kambi.com/player/api/v2019/pivuspa/coupon.json?lang=en_US&amp;market=US&amp;channel_id=1&quot;">login_user_smoke = {'initial_data': {'password': 'A@aaaaaa', 'username': 'BEauto270603630'}, 'response_data': {'code': None, 'data': {'ac...021-04-27T18:15:39.546645Z', 'feature_flags': [], ...}, 'message': 'Login successful', 'success': True}, 'state': 'PA'}
kambiapi = &lt;kambi_api.KambiApi object at 0x10fe163a0&gt;

    @pytest.fixture()
    def place_bet(login_user_smoke, kambiapi):
        kambi_session_id = login_user_smoke['response_data']['data']['kambi_session_id']
&gt;       place_bet_response = kambiapi.place_bet(kambi_session_id)

kambi/test_place_bet.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../Piv_packages/api_interactions/kambi_api.py:93: in place_bet
    place_bet_request.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Response [409]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ''
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode('utf-8')
            except UnicodeDecodeError:
                reason = self.reason.decode('iso-8859-1')
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 409 Client Error: Conflict for url: https://ctn-api.kambi.com/player/api/v2019/pivuspa/coupon.json?lang=en_US&amp;market=US&amp;channel_id=1

../../../../pyvirtualenv/vedemo/lib/python3.8/site-packages/requests/models.py:943: HTTPError</error></testcase></testsuite></testsuites>